---
- name: Ubuntu-Worker | Update package cache
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Ubuntu-Worker | Remove swapfile from /etc/fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
    - none

- name: Ubuntu-Worker | Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Ubuntu-Worker | Install a list of packages
  apt:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - curl
    - gpg
    - gnupg-agent
    - software-properties-common

- name: Ubuntu-Worker | Create /etc/apt/keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Ubuntu-Worker | create an empty file for the Containerd module
  copy:
    content: ""
    dest: /etc/modules-load.d/containerd.conf
    force: no

- name: Ubuntu-Worker | configure modules for Containerd
  blockinfile:
    path: /etc/modules-load.d/containerd.conf
    block: |
          overlay
          br_netfilter

- name: Ubuntu-Worker | add Docker apt-key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker-apt-keyring.asc
    mode: '0644'
    force: true

- name: Ubuntu-Worker | Add Docker's APT repository
  apt_repository:
    repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' }} signed-by=/etc/apt/keyrings/docker-apt-keyring.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    update_cache: yes

- name: Ubuntu-Worker | Add an apt signing key for Kubernetes
  ansible.builtin.get_url:
    url: https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_major_version }}/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
    mode: '0644'
    force: true

- name: Ubuntu-Worker | Adding apt repository for Kubernetes
  ansible.builtin.apt_repository:
    repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_major_version }}/deb/ /
    state: present
    update_cache: yes

- name: Ubuntu-Worker | load br_netfilter kernel module
  modprobe:
    name: br_netfilter
    state: present

- name: Ubuntu-Worker | set bridge-nf-call-iptables
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1

- name: Ubuntu-Worker | set ip_forward
  sysctl:
    name: net.ipv4.ip_forward
    value: 1

- name: Ubuntu-Worker | create an empty file for Kubernetes sysctl params
  copy:
    content: ""
    dest: /etc/sysctl.d/k8s.conf
    force: no

- name: Ubuntu-Worker | configure sysctl params for Kubernetes
  lineinfile:
    path: /etc/sysctl.d/k8s.conf
    line: "{{ item }}"
  with_items:
    - 'net.bridge.bridge-nf-call-iptables  = 1'
    - 'net.ipv4.ip_forward                 = 1'
    - 'net.bridge.bridge-nf-call-ip6tables = 1'

- name: Ubuntu-Worker | apply sysctl params without reboot
  command: sysctl --system

- name: Ubuntu-Worker | Install kubernetes packages
  ansible.builtin.apt:
    pkg:
    - kubelet={{ kubernetes_major_version }}.*
    - kubeadm={{ kubernetes_major_version }}.*
    - containerd.io
    state: present

- name: Ubuntu-Worker | Configuring the systemd cgroup driver for Containerd
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: '            SystemdCgroup = false'
    line: '            SystemdCgroup = true'

- name: Ubuntu-Worker | Updating /etc/containerd/config.toml
  lineinfile:
    path: /etc/containerd/config.toml
    state: absent
    regexp: '^disabled_plugins = \["cri"\]'

- name: Ubuntu-Worker | Enable and restart Containerd service
  systemd:
    name: containerd
    state: restarted
    enabled: yes
    daemon-reload: yes

- name: Ubuntu-Worker | Enable and restart kubelet service
  systemd:
    name: kubelet
    state: restarted
    enabled: yes

- name: Ubuntu-Worker | join worker to master
  shell: "{{ hostvars['ubuntu-master'].join_command }}"

